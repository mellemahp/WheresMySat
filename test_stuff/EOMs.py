# -*- coding: utf-8 -*-
"""
Created on Thu Jan 31 17:21:20 2019

@author: chels
"""

import numpy as np
from coe2rv import coe2rvfunc, rad2deg, deg2rad
from math import sqrt


def constants():
    Re = 6378.1363 #km
    mu = 3.986004415e5 #km^3/s^2
    J2 = 1.08262617385222e-3
    return Re, mu, J2

def J3const():
    J3 = -2.53241051856772e-6
    return J3

def eom(t,rv):
    Re, mu, J2 = constants()
    x,y,z,u,v,w = rv
    r = np.sqrt(x**2+y**2+z**2)
    xdot = u
    vxdot = -mu*x/(r**3)-3.*J2*mu*Re**2*x*(1.-5.*z**2/(r**2))/(2*r**5)
    ydot = v
    vydot = -mu*y/(r**3)-3.*J2*mu*Re**2*y*(1.-5.*z**2/(r**2))/(2*r**5)
    zdot = w
    vzdot = -mu*z/(r**3)-3.*J2*mu*Re**2*z*(3.-5.*z**2/(r**2))/(2.*r**5)
    
    drvdt=[xdot,ydot,zdot,vxdot,vydot,vzdot]
    return drvdt

def eom_wJ3(t,rv):
    Re, mu, J2 = constants()
    J3 = J3const()
    x,y,z,u,v,w = rv
    r = np.sqrt(x**2+y**2+z**2)
    xdot = u
    vxdot = -mu*x/(r**3)-3.*J2*mu*Re**2*x*(1.-5.*z**2/(r**2))/(2*r**5)-\
    5.*J3*mu*Re**3*x*(3.*z-(7.*z**3)/(r**2))/(2.*r**7)
    ydot = v
    vydot = -mu*y/(r**3)-3.*J2*mu*Re**2*y*(1.-5.*z**2/(r**2))/(2*r**5)-\
    5.*J3*mu*Re**3*y*(3.*z-(7.*z**3)/(r**2))/(2.*r**7)
    zdot = w
    vzdot = -mu*z/(r**3)-3.*J2*mu*Re**2*z*(3.-5.*z**2/(r**2))/(2.*r**5)-\
    5.*J3*mu*Re**3*(6.*z**2-(7.*z**4)/(r**2)-3.*(r**2)/5.)/(2.*r**7)
    drvdt=[xdot,ydot,zdot,vxdot,vydot,vzdot]
    return drvdt

def dfdx_wJ2J3(w):
    Re = 6378.1363   #km
    x = w[0]
    y = w[1]
    z = w[2]
    r = sqrt(x**2+y**2+z**2)
    mu = w[6]
    J2 = w[7]
    J3 = w[8]
    #f1 partials
    df1dx = (3*mu*x**2)/(x**2 + y**2 + z**2)**(5/2) - mu/(x**2 + y**2 + z**2)**(3/2) \
        - (5*J3*Re**3*mu*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        + (3*J2*Re**2*mu*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(5/2)) \
        + (35*J3*Re**3*mu*x**2*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x**2*z**2)/(x**2 + y**2 + z**2)**(9/2) \
        - (35*J3*Re**3*mu*x**2*z**3)/(x**2 + y**2 + z**2)**(11/2) \
        - (15*J2*Re**2*mu*x**2*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df1dy = (3*mu*x*y)/(x**2 + y**2 + z**2)**(5/2) + \
        (35*J3*Re**3*mu*x*y*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x*y*z**2)/(x**2 + y**2 + z**2)**(9/2) \
        - (35*J3*Re**3*mu*x*y*z**3)/(x**2 + y**2 + z**2)**(11/2) \
        - (15*J2*Re**2*mu*x*y*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df1dz = (3*mu*x*z)/(x**2 + y**2 + z**2)**(5/2) + (3*J2*Re**2*mu*x*((10*z)/(x**2 + y**2 + z**2) \
        - (10*z**3)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(5/2)) \
        - (5*J3*Re**3*mu*x*((14*z**4)/(x**2 + y**2 + z**2)**2  \
        - (21*z**2)/(x**2 + y**2 + z**2) + 3))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        + (35*J3*Re**3*mu*x*z*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x*z*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df1dvx = 0
    df1dvy = 0
    df1dvz = 0
    df1dJ2 = -((3 * mu * Re**2 * x * (x**2 + y**2 - 4 * z**2))/(2 * (x**2 + y**2 + z**2)**(7/2)))
    df1dJ3 = -((5 * mu * Re**3 * x * z * (3 * x**2 + 3 * y**2 - 4 * z**2))/(2 * (x**2 + y**2 + z**2)**(9/2)))
    df1dmu = x/(x**2 + y**2 + z**2)**(3/2) \
        - (5*J3*Re**3*x*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        + (3*J2*Re**2*x*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(5/2))
    #f2 partials
    df2dx = (1/(2 * (x**2 + y**2 + z**2)**( \
        11/2))) * 3 * mu * x * y * (2 * x**6 + 2 * y**6 + 35 * J3 * Re**3 * y**2 * z + 6 * y**4 * z**2 -  \
        70 * J3 * Re**3 * z**3 + 6 * y**2 * z**4 + 2 * z**6 + 6 * x**4 * (y**2 + z**2) +  \
        x**2 * (6 * y**4 + 35 * J3 * Re**3 * z + 12 * y**2 * z**2 + 6 * z**4) +  \
        5 * J2 * Re**2 * (x**4 + y**4 - 5 * y**2 * z**2 - 6 * z**4 + x**2 * (2 * y**2 - 5 * z**2)))
    df2dy = (3*mu*y**2)/(x**2 + y**2 + z**2)**(5/2) - mu/(x**2 + y**2 + z**2)**(3/2) -  \
        (5*J3*Re**3*mu*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(7/2)) +  \
        (3*J2*Re**2*mu*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(5/2)) +  \
        (35*J3*Re**3*mu*y**2*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) -  \
        (15*J2*Re**2*mu*y**2*z**2)/(x**2 + y**2 + z**2)**(9/2) -  \
        (35*J3*Re**3*mu*y**2*z**3)/(x**2 + y**2 + z**2)**(11/2) -  \
        (15*J2*Re**2*mu*y**2*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df2dz = (3*mu*y*z)/(x**2 + y**2 + z**2)**(5/2) + (3*J2*Re**2*mu*y*((10*z)/(x**2 + y**2 + z**2) \
        - (10*z**3)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(5/2)) \
        - (5*J3*Re**3*mu*y*((14*z**4)/(x**2 + y**2 + z**2)**2 -  \
        (21*z**2)/(x**2 + y**2 + z**2) + 3))/(2*(x**2 + y**2 + z**2)**(7/2)) +  \
        (35*J3*Re**3*mu*y*z*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) -  \
        (15*J2*Re**2*mu*y*z*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df2dvx = 0
    df2dvy = 0
    df2dvz = 0
    df2dmu = -y/(r**3)-(3*J2*(Re**2)*y)*(1-((5*z**2)/(r**2)))/(2*r**5)-(5*J3*Re**3*y) \
        *(3*z-((7*z**3)/(r**2)))/(2*(r**7))
    df2dJ2 = -((3 * mu * Re**2 * y * (x**2 + y**2 - 4 * z**2))/(2 * (x**2 + y**2 + z**2)**(7/2)))
    df2dJ3 = -((5 * mu * Re**3 * y * z * (3 * x**2 + 3 * y**2 - 4 * z**2))/(2 * \
        (x**2 + y**2 + z**2)**(9/2)))
    #f3 partials
    df3dx = (3*mu*x*z)/(x**2 + y**2 + z**2)**(5/2) + (5*J3*Re**3*mu*((6*x)/5 - (14*x*z**4)/ \
        (x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(7/2)) - (35*J3*Re**3*mu*x*((7*z**4)/ \
        (x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5 - (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x*z**3)/(x**2 + y**2 + z**2)**(9/2) -  \
        (15*J2*Re**2*mu*x*z*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(7/2))
    df3dy = (3*mu*y*z)/(x**2 + y**2 + z**2)**(5/2) +  \
        (5*J3*Re**3*mu*((6*y)/5 - (14*y*z**4)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        - (35*J3*Re**3*mu*y*((7*z**4)/(x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5  \
    - (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(9/2)) - (15*J2*Re**2*mu*y*z**3)/(x**2 + y**2 + z**2)**(9/2)  \
        - (15*J2*Re**2*mu*y*z*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(7/2))
    df3dz = (3*mu*z**2)/(x**2 + y**2 + z**2)**(5/2) - mu/(x**2 + y**2 + z**2)**(3/2) -  \
        (5*J3*Re**3*mu*((54*z)/5 - (28*z**3)/(x**2 + y**2 + z**2) +  \
        (14*z**5)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(7/2)) +  \
        (3*J2*Re**2*mu*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(5/2)) -  \
        (35*J3*Re**3*mu*z*((7*z**4)/(x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5 -  \
        (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(9/2)) + (3*J2*Re**2*mu*z*((10*z)/(x**2 + y**2 + z**2) -  \
        (10*z**3)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(5/2)) -  \
        (15*J2*Re**2*mu*z**2*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(7/2))
    df3dvx = 0
    df3dvy = 0
    df3dvz = 0
    df3dmu = (5*J3*Re**3*((7*z**4)/(x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5 - (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        - z/(x**2 + y**2 + z**2)**(3/2) + (3*J2*Re**2*z*((5*z**2)/(x**2 + y**2 + z**2) - 3))/ \
        (2*(x**2 + y**2 + z**2)**(5/2))
    df3dJ2 = (3 * mu * Re**2 * z * (-3 * x**2 - 3 * y**2 + 2 * z**2))/(2 * (x**2 + y**2 + z**2)**(7/2))
    df3dJ3 = (5*Re**3*mu*((7*z**4)/(x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5  \
        - (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(7/2))
    dfdx = np.array([[0.,0., 0., 1., 0., 0., 0., 0., 0.],\
        [0., 0., 0., 0., 1., 0., 0., 0., 0.],\
        [0., 0., 0., 0., 0., 1., 0., 0., 0.],\
        [df1dx, df1dy, df1dz, df1dvx, df1dvy, df1dvz, df1dmu, df1dJ2, df1dJ3],\
        [df2dx, df2dy, df2dz, df2dvx, df2dvy, df2dvz, df2dmu, df2dJ2, df2dJ3],\
        [df3dx, df3dy, df3dz, df3dvx, df3dvy, df3dvz, df3dmu, df3dJ2, df3dJ3],\
        [0., 0., 0., 0., 0., 0., 0., 0., 0.]])
    return dfdx


def dfdx_wJ2(w):
    Re, mu, J2 = constants()
    x = w[0]
    y = w[1]
    z = w[2]
    J2 = w[6]
    J3 = 0.
    #f1 partials
    df1dx = (3*mu*x**2)/(x**2 + y**2 + z**2)**(5/2) - mu/(x**2 + y**2 + z**2)**(3/2) \
        - (5*J3*Re**3*mu*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        + (3*J2*Re**2*mu*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(5/2)) \
        + (35*J3*Re**3*mu*x**2*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x**2*z**2)/(x**2 + y**2 + z**2)**(9/2) \
        - (35*J3*Re**3*mu*x**2*z**3)/(x**2 + y**2 + z**2)**(11/2) \
        - (15*J2*Re**2*mu*x**2*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df1dy = (3.*mu*x*y)/(x**2 + y**2 + z**2)**(5./2.) + \
        (35.*J3*Re**3.*mu*x*y*(3.*z - (7.*z**3)/(x**2 + y**2 + z**2)))/(2.*(x**2 + y**2 + z**2)**(9/2)) \
        - (15.*J2*Re**2*mu*x*y*z**2)/(x**2 + y**2 + z**2)**(9/2) \
        - (35.*J3*Re**3.*mu*x*y*z**3)/(x**2 + y**2 + z**2)**(11/2) \
        - (15.*J2*Re**2.*mu*x*y*((5.*z**2)/(x**2 + y**2 + z**2) - 1.))/(2.*(x**2 + y**2 + z**2)**(7/2))
    df1dz = (3*mu*x*z)/(x**2 + y**2 + z**2)**(5/2) + (3*J2*Re**2*mu*x*((10*z)/(x**2 + y**2 + z**2) \
        - (10*z**3)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(5/2)) \
        - (5*J3*Re**3*mu*x*((14*z**4)/(x**2 + y**2 + z**2)**2  \
        - (21*z**2)/(x**2 + y**2 + z**2) + 3))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        + (35*J3*Re**3*mu*x*z*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x*z*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df1dvx = 0
    df1dvy = 0
    df1dvz = 0
    df1dJ2 = -((3 * mu * Re**2 * x * (x**2 + y**2 - 4 * z**2))/(2 * (x**2 + y**2 + z**2)**(7/2)))
    #f2 partials
    df2dx = (1/(2 * (x**2 + y**2 + z**2)**( \
        11/2))) * 3 * mu * x * y * (2 * x**6 + 2 * y**6 + 35 * J3 * Re**3 * y**2 * z + 6 * y**4 * z**2 -  \
        70 * J3 * Re**3 * z**3 + 6 * y**2 * z**4 + 2 * z**6 + 6 * x**4 * (y**2 + z**2) +  \
        x**2 * (6 * y**4 + 35 * J3 * Re**3 * z + 12 * y**2 * z**2 + 6 * z**4) +  \
        5 * J2 * Re**2 * (x**4 + y**4 - 5 * y**2 * z**2 - 6 * z**4 + x**2 * (2 * y**2 - 5 * z**2)))
    df2dy = (3*mu*y**2)/(x**2 + y**2 + z**2)**(5/2) - mu/(x**2 + y**2 + z**2)**(3/2) -  \
        (5*J3*Re**3*mu*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(7/2)) +  \
        (3*J2*Re**2*mu*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(5/2)) +  \
        (35*J3*Re**3*mu*y**2*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) -  \
        (15*J2*Re**2*mu*y**2*z**2)/(x**2 + y**2 + z**2)**(9/2) -  \
        (35*J3*Re**3*mu*y**2*z**3)/(x**2 + y**2 + z**2)**(11/2) -  \
        (15*J2*Re**2*mu*y**2*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df2dz = (3*mu*y*z)/(x**2 + y**2 + z**2)**(5/2) + (3*J2*Re**2*mu*y*((10*z)/(x**2 + y**2 + z**2) \
        - (10*z**3)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(5/2)) \
        - (5*J3*Re**3*mu*y*((14*z**4)/(x**2 + y**2 + z**2)**2 -  \
        (21*z**2)/(x**2 + y**2 + z**2) + 3))/(2*(x**2 + y**2 + z**2)**(7/2)) +  \
        (35*J3*Re**3*mu*y*z*(3*z - (7*z**3)/(x**2 + y**2 + z**2)))/(2*(x**2 + y**2 + z**2)**(9/2)) -  \
        (15*J2*Re**2*mu*y*z*((5*z**2)/(x**2 + y**2 + z**2) - 1))/(2*(x**2 + y**2 + z**2)**(7/2))
    df2dvx = 0.
    df2dvy = 0.
    df2dvz = 0.
    df2dJ2 = -((3 * mu * Re**2 * y * (x**2 + y**2 - 4 * z**2))/(2 * (x**2 + y**2 + z**2)**(7/2)))
    #f3 partials
    df3dx = (3*mu*x*z)/(x**2 + y**2 + z**2)**(5/2) + (5*J3*Re**3*mu*((6*x)/5 - (14*x*z**4)/ \
        (x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(7/2)) - (35*J3*Re**3*mu*x*((7*z**4)/ \
        (x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5 - (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(9/2)) \
        - (15*J2*Re**2*mu*x*z**3)/(x**2 + y**2 + z**2)**(9/2) -  \
        (15*J2*Re**2*mu*x*z*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(7/2))
    df3dy = (3*mu*y*z)/(x**2 + y**2 + z**2)**(5/2) +  \
        (5*J3*Re**3*mu*((6*y)/5 - (14*y*z**4)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(7/2)) \
        - (35*J3*Re**3*mu*y*((7*z**4)/(x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5  \
    - (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(9/2)) - (15*J2*Re**2*mu*y*z**3)/(x**2 + y**2 + z**2)**(9/2)  \
        - (15*J2*Re**2*mu*y*z*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(7/2))
    df3dz = (3*mu*z**2)/(x**2 + y**2 + z**2)**(5/2) - mu/(x**2 + y**2 + z**2)**(3/2) -  \
        (5*J3*Re**3*mu*((54*z)/5 - (28*z**3)/(x**2 + y**2 + z**2) +  \
        (14*z**5)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(7/2)) +  \
        (3*J2*Re**2*mu*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(5/2)) -  \
        (35*J3*Re**3*mu*z*((7*z**4)/(x**2 + y**2 + z**2) + (3*x**2)/5 + (3*y**2)/5 -  \
        (27*z**2)/5))/(2*(x**2 + y**2 + z**2)**(9/2)) + (3*J2*Re**2*mu*z*((10*z)/(x**2 + y**2 + z**2) -  \
        (10*z**3)/(x**2 + y**2 + z**2)**2))/(2*(x**2 + y**2 + z**2)**(5/2)) -  \
        (15*J2*Re**2*mu*z**2*((5*z**2)/(x**2 + y**2 + z**2) - 3))/(2*(x**2 + y**2 + z**2)**(7/2))
    df3dvx = 0
    df3dvy = 0
    df3dvz = 0
    df3dJ2 = (3 * mu * Re**2 * z * (-3 * x**2 - 3 * y**2 + 2 * z**2))/(2 * (x**2 + y**2 + z**2)**(7/2))
    dfdx = np.array([[0.,0., 0., 1., 0., 0., 0.],\
        [0., 0., 0., 0., 1., 0., 0.],\
        [0., 0., 0., 0., 0., 1., 0.],\
        [df1dx, df1dy, df1dz, df1dvx, df1dvy, df1dvz, df1dJ2],\
        [df2dx, df2dy, df2dz, df2dvx, df2dvy, df2dvz, df2dJ2],\
        [df3dx, df3dy, df3dz, df3dvx, df3dvy, df3dvz, df3dJ2],\
        [0., 0., 0., 0., 0., 0., 0.]])
    return dfdx

#find number of states given length of input z
def num_state(state):
    c = len(state)
    n = (-1.+np.sqrt(1.+4.*c))/2.
    n = int(n)
    return n
    

def keplerJ2J3_wPhi_ODE_thangavelu(t,z): #[time,state]
    Re,mu,J2 = constants()
    n = num_state(z)
    xs = z[0:n] #state
    phi = z[n:n**2+n].reshape((n,n))
#    x = xs[0]
#    y = xs[1]
#    z = xs[2]
    #use EOM to calculate xd
    xd = eom(t,xs[0:6])
    #calculate dfdz = A
    dfdx = dfdx_wJ2J3(xs)
    #calculate phid
    phid = dfdx @ phi;
    #reshape dxs and Phid to get zd
#    phid_flat = phid.reshape((n**2,1))
    # to make this match matlab we have to transpose phid before flattening
    #but this will break the reshaping step, so don't transpose it.
#    phid_flat = phid.T.flatten()
    phid_flat = phid.flatten()
    zd = np.concatenate((np.array(xd).reshape(len(xd)),np.array([0.]),phid_flat))
    return zd
# testing
#y0 = list(coe2rvfunc(10000.,.001,deg2rad(40.),deg2rad(80.),deg2rad(40.),0.).reshape(6))
#z0 = np.concatenate((y0,np.array([constants()[2]]),np.eye(7).flatten()))

